{"version":3,"sources":["../../src/resolveComponentStyle.js"],"names":["resolveComponentStyle","isStyleVariant","propertyName","test","isChildStyle","splitStyle","style","reduce","result","value","key","styleSection","componentStyle","styleVariants","childrenStyle","componentName","styleNames","themeStyle","parentStyle","elementStyle","mergedStyle","merge","map","sn","resolvedStyle"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgFgBA,qB,CAAAA,qB,CAhFhB,8B,wSAWA,QAASC,eAAT,CAAwBC,YAAxB,CAAsC,CACpC,MAAO,OAAMC,IAAN,CAAWD,YAAX,CAAP,CACD,CAcD,QAASE,aAAT,CAAsBF,YAAtB,CAAoC,CAClC,MAAO,qBAAoBC,IAApB,CAAyBD,YAAzB,CAAP,CACD,CAWD,QAASG,WAAT,CAAoBC,KAApB,CAA2B,CACzB,MAAO,kBAAEC,MAAF,CAASD,KAAT,CAAgB,SAACE,MAAD,CAASC,KAAT,CAAgBC,GAAhB,CAAwB,CAC7C,GAAIC,cAAeH,OAAOI,cAA1B,CACA,GAAIX,eAAeS,GAAf,CAAJ,CAAyB,CACvBC,aAAeH,OAAOK,aAAtB,CACD,CAFD,IAEO,IAAIT,aAAaM,GAAb,CAAJ,CAAuB,CAC5BC,aAAeH,OAAOM,aAAtB,CACD,CACDH,aAAaD,GAAb,EAAoBD,KAApB,CACA,MAAOD,OAAP,CACD,CATM,CASJ,CACDI,eAAgB,EADf,CAEDC,cAAe,EAFd,CAGDC,cAAe,EAHd,CATI,CAAP,CAcD,CAyBM,QAASd,sBAAT;AACLe,aADK;;;;;AAML,IAJAC,WAIA,2DAJa,EAIb,IAHAC,WAGA,2DAHa,EAGb,IAFAC,YAEA,2DAFc,EAEd,IADAC,aACA,2DADe,EACf;;;;;;AAMA,GAAMC,aAAc,iBAAEC,KAAF,yBAAQ,EAAR;AAClBJ,UADkB;AAElBC,YAAY,GAAZ,CAFkB;AAGlBA,YAAYH,aAAZ,CAHkB;AAIf,iBAAEO,GAAF,CAAMN,UAAN,CAAkB,SAACO,EAAD,QAAQN,gBAAeM,EAAf,CAAR,EAAlB,CAJe;AAKf,iBAAED,GAAF,CAAMN,UAAN,CAAkB,SAACO,EAAD,QAAQL,kBAAiBK,EAAjB,CAAR,EAAlB,CALe;AAMf,iBAAED,GAAF,CAAMN,UAAN,CAAkB,SAACO,EAAD,QAAQL,aAAeH,aAAf,KAAgCQ,EAAhC,CAAR,EAAlB,CANe;AAOlBJ,YAPkB,GAApB;;;;;;AAaA,GAAMK,eAAgB,iBAAEH,KAAF,yBAAQ,EAAR;AACpBD,WADoB;AAEpBF,YAAY,GAAZ,CAFoB;AAGpBA,YAAYH,aAAZ,CAHoB;AAIjB,iBAAEO,GAAF,CAAMN,UAAN,CAAkB,SAACO,EAAD,QAAQH,iBAAgBG,EAAhB,CAAR,EAAlB,CAJiB;AAKjB,iBAAED,GAAF,CAAMN,UAAN,CAAkB,SAACO,EAAD,QAAQL,kBAAiBK,EAAjB,CAAR,EAAlB,CALiB;AAMjB,iBAAED,GAAF,CAAMN,UAAN,CAAkB,SAACO,EAAD,QAAQL,aAAeH,aAAf,KAAgCQ,EAAhC,CAAR,EAAlB,CANiB;AAOpBJ,YAPoB,GAAtB,CAnBA;;;AA6B0Cd,WAAWmB,aAAX,CA7B1C,CA6BQZ,cA7BR,aA6BQA,cA7BR,CA6BwBE,aA7BxB,aA6BwBA,aA7BxB;;AA+BA,MAAO;AACLF,6BADK;AAELE,2BAFK,CAAP;;AAID","file":"resolveComponentStyle.js","sourcesContent":["import _ from 'lodash';\n\n/**\n * Matches any style properties that represent component style variants.\n * Those styles can be applied to the component by using the styleName\n * prop. All style variant property names must start with a single '.'\n * character, e.g., '.variant'.\n *\n * @param propertyName The style property name.\n * @returns {boolean} True if the style property represents a component variant, false otherwise.\n */\nfunction isStyleVariant(propertyName) {\n  return /^\\./.test(propertyName);\n}\n\n/**\n * Matches any style properties that represent style rules that target the\n * component children. Those styles can have two formats, they can either\n * target the components by component name ('shoutem.ui.Text'), or by component\n * name and variant ('shoutem.ui.Text.line-through'). Beside specifying the\n * component name, those styles can also target any component by using the\n * '*' wildcard ('*', or '*.line-through'). The rule to identify those styles is\n * that they have to contain a '.' character in their name or be a '*'.\n *\n * @param propertyName The style property name.\n * @returns {boolean} True if the style property represents a child style, false otherwise.\n */\nfunction isChildStyle(propertyName) {\n  return /(^[^\\.].*\\.)|^\\*$/.test(propertyName);\n}\n\n/**\n * Splits the style into its parts:\n * component style - concrete style that needs to be applied to a component\n * style variants - variants that can be applied to a component by using styleName prop\n * children style - style rules that need to be propagated to component children\n *\n * @param style The style to split.\n * @returns {*} An object with the componentStyle, styleVariants, and childrenStyle keys.\n */\nfunction splitStyle(style) {\n  return _.reduce(style, (result, value, key) => {\n    let styleSection = result.componentStyle;\n    if (isStyleVariant(key)) {\n      styleSection = result.styleVariants;\n    } else if (isChildStyle(key)) {\n      styleSection = result.childrenStyle;\n    }\n    styleSection[key] = value;\n    return result;\n  }, {\n    componentStyle: {},\n    styleVariants: {},\n    childrenStyle: {},\n  });\n}\n\n/**\n * Resolves the final component style by merging all of the styles that can be\n * applied to a component in the proper order.\n *\n * This function extracts the applicable parts of the theme, parent and element\n * styles, and merges the styles that target the component, and component variants\n * with those styles to get the final style.\n *\n * The styles are merged in the following order, where the styles with the\n * higher index override the styles with the lower one:\n * 1. Theme component style\n * 2. Parent component style\n * 3. Theme style variants specified through styleName\n * 4. Parent style variants specified through styleName\n * 5. Element style passed through the style prop\n *\n * @param componentName The component name ('shoutem.ui.Text')\n * @param styleName Style names ('large rounded')\n * @param themeStyle The theme style that should include the theme and base component style\n * @param parentStyle The style rules inherited from the parent component\n * @param elementStyle The style passed through the style prop of the component\n * @returns {{componentStyle, childrenStyle}} The resolved component and children styles.\n */\nexport function resolveComponentStyle(\n  componentName,\n  styleNames = [],\n  themeStyle = {},\n  parentStyle = {},\n  elementStyle = {}\n) {\n  // Phase 1: merge the styles in the correct order to resolve the variant styles,\n  // the component style will be merged as well in this step, but the component\n  // style merge results are ignored after this step. We need to perform this\n  // step separately because the style variants may be overridden by any style, so\n  // the purpose of this phase is to determine the final state of the variant styles.\n  const mergedStyle = _.merge({},\n    themeStyle,\n    parentStyle['*'],\n    parentStyle[componentName],\n    ..._.map(styleNames, (sn) => themeStyle[`.${sn}`]),\n    ..._.map(styleNames, (sn) => parentStyle[`*.${sn}`]),\n    ..._.map(styleNames, (sn) => parentStyle[`${componentName}.${sn}`]),\n    elementStyle\n  );\n\n  // Phase 2: merge the component styles, this step is performed by using the\n  // style from phase 1, so that we are sure that the final style variants are\n  // applied to component style.\n  const resolvedStyle = _.merge({},\n    mergedStyle,\n    parentStyle['*'],\n    parentStyle[componentName],\n    ..._.map(styleNames, (sn) => mergedStyle[`.${sn}`]),\n    ..._.map(styleNames, (sn) => parentStyle[`*.${sn}`]),\n    ..._.map(styleNames, (sn) => parentStyle[`${componentName}.${sn}`]),\n    elementStyle\n  );\n\n  const { componentStyle, childrenStyle } = splitStyle(resolvedStyle);\n\n  return {\n    componentStyle,\n    childrenStyle,\n  };\n}\n"]}